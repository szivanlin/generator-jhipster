<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import React, { useEffect, useState } from 'react';
import { useNavigate, useParams , useLocation} from 'react-router-dom';

import { Translate } from 'react-jhipster';

import { useAppDispatch, useAppSelector } from 'app/config/store';
import { getEntity, deleteEntity } from 'app/reducers/entities/<%= entityFolderName %>/<%= entityFileName %>.reducer';

import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';
import DeleteIcon from '@mui/icons-material/Delete';

export const <%= entityReactName %>DeleteDialog = () => {
  const [loadModal, setLoadModal] = useState(false);
  const dispatch = useAppDispatch();
  const matchParams = useParams();
  const navigate = useNavigate();
  const location = useLocation();

  useEffect(() => {
    dispatch(getEntity(matchParams.id));
    setLoadModal(true);
  }, []);

  const <%= entityInstance %>Entity = useAppSelector(state => state.<%= entityReactState %>.entity);
  const updateSuccess = useAppSelector(state => state.<%= entityReactState %>.updateSuccess);

  const handleClose = () => {

    navigate('/<%= entityPage %>'<%_ if (paginationPagination) { _%> + location.search<%_ } _%>);
  };

  useEffect(() => {
    if (updateSuccess && loadModal) {
      handleClose();
      setLoadModal(false);
    }
  }, [updateSuccess]);

  const confirmDelete = () => {
    dispatch(deleteEntity(<%= entityInstance %>Entity.<%= primaryKey.name %>));
  }

  return (
    <Dialog open onClose={handleClose}>
      <DialogTitle data-cy="<%= entityInstance %>DeleteDialogHeading"><Translate contentKey="entity.delete.title">Confirm delete operation</Translate></DialogTitle>
      <DialogContent>
        <DialogContentText id="<%= i18nKeyPrefix %>.delete.question">
          <Translate contentKey="<%= i18nKeyPrefix %>.delete.question" interpolate={{ id: <%= entityInstance %>Entity.<%= primaryKey.name %> }}>
            Are you sure you want to delete this <%= entityClass %>?
          </Translate>
        </DialogContentText>
      </DialogContent>
      <DialogActions>
        <Button onClick={handleClose}>&nbsp;<Translate contentKey="entity.action.cancel">Cancel</Translate></Button>
        <Button
          id="<%= jhiPrefixDashed %>-confirm-delete-<%= entityInstance %>"
          onClick={confirmDelete}
          autoFocus
          data-cy="entityConfirmDeleteButton"
          color="warning" 
          startIcon={<DeleteIcon />}
        >
          &nbsp; <Translate contentKey="entity.action.delete">Delete</Translate>
        </Button>
      </DialogActions>
    </Dialog>

  );
};

export default <%= entityReactName %>DeleteDialog;
