<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import React, { useState, useEffect } from 'react';
<%_ if (paginationInfiniteScroll) { _%>
import InfiniteScroll from 'react-infinite-scroll-component';
<%_ } _%>
import { Link, useNavigate, useLocation, useSearchParams } from 'react-router-dom';

import {
  <%_ if (blobFields.length > 0) { _%>
    <%_ if (fieldsContainBlobOrImage) { _%>
  openFile,
    <%_ } _%>
  byteSize,
  <%_ } _%>
  Translate<% if (searchEngine) { %>, translate<% } %>
  <% if (fieldsContainDate) { %>, TextFormat<% } %>
  <%_ if (!paginationNo) { _%>
  , getSortState
  <% } _%>
} from 'react-jhipster';


import { APP_DATE_FORMAT, APP_LOCAL_DATE_FORMAT } from 'app/config/constants';
<%_ if (!paginationNo) { _%>
import { ASC, DESC, ITEMS_PER_PAGE, SORT } from 'app/shared/util/pagination.constants';
import { overridePaginationStateWithQueryParams } from 'app/shared/util/entity-utils';
<%_ } _%>
import { useAppDispatch, useAppSelector } from 'app/config/store';
<%_ if (fieldsContainDuration) { _%>
import { DurationFormat } from 'app/shared/DurationFormat';
<%_ } _%>

import { I<%= entityReactName %> } from 'app/shared/model/<%= entityModelFileName %>.model';
import {
<%_ if (searchEngine) { _%>
  searchEntities,
<%_ } _%>
  getEntities,
<%_ if (paginationInfiniteScroll) { _%>
  reset,
<%_ } _%>
} from 'app/reducers/entities/<%= entityFolderName %>/<%= entityFileName %>.reducer';
import { DataGridPro, GridColDef, GridRenderCellParams } from '@mui/x-data-grid-pro';
import { styled } from '@mui/material/styles';
import Box from '@mui/material/Box';
import Button from '@mui/material/Button';
import Typography from '@mui/material/Typography';
import RefreshIcon from '@mui/icons-material/Refresh';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import InfoIcon from '@mui/icons-material/Info';
import DeleteIcon from '@mui/icons-material/Delete';


export const <%= entityReactName %> = () => {
  const dispatch = useAppDispatch();
  const [searchParams, setSearchParams] = useSearchParams();
  const location = useLocation();
  const navigate = useNavigate();

<%_ if (searchEngine) { _%>
  const [search, setSearch] = useState('');
<%_ } _%>
<%_ if (!paginationNo) { _%>
  const [paginationState, setPaginationState] = useState(overridePaginationStateWithQueryParams(getSortState(location, ITEMS_PER_PAGE, '<%= primaryKey.name %>'), location.search));
<%_ } _%>
<%_ if (paginationInfiniteScroll) { _%>
  const [sorting, setSorting] = useState(false);
<%_ } _%>

  const <%= entityInstance %>List = useAppSelector(state => state.<%= entityReactState %>.entities);
  const loading = useAppSelector(state => state.<%= entityReactState %>.loading);
  <%_ if (!paginationNo) { _%>
  const totalItems = useAppSelector(state => state.<%= entityReactState %>.totalItems);
  <%_ } _%>
  <%_ if (paginationInfiniteScroll) { _%>
  const links = useAppSelector(state => state.<%= entityReactState %>.links);
  const entity = useAppSelector(state => state.<%= entityReactState %>.entity);
  const updateSuccess = useAppSelector(state => state.<%= entityReactState %>.updateSuccess);
  <%_ } _%>

<%_ if (paginationPagination || paginationInfiniteScroll || !paginationNo && !paginationInfiniteScroll) { _%>
  const getAllEntities = () => {
  <%_ if (searchEngine) { _%>
    if (search) {
      dispatch(
        searchEntities({
          query: search,
          page: paginationState.activePage - 1,
          size: paginationState.itemsPerPage,
          sort: `${paginationState.sort},${paginationState.order}`
        })
      );
    } else {
      dispatch(
        getEntities({
          page: paginationState.activePage - 1,
          size: paginationState.itemsPerPage,
          sort: `${paginationState.sort},${paginationState.order}`,
        })
      );
    }
  <%_ } else { _%>
      dispatch(
        getEntities({
          page: paginationState.activePage - 1,
          size: paginationState.itemsPerPage,
          sort: `${paginationState.sort},${paginationState.order}`,
        })
      );
  <%_ } _%>
  };
<%_ } _%>

<%_ if (paginationInfiniteScroll) { _%>
  const resetAll = () => {
    dispatch(reset());
    setPaginationState({
      ...paginationState,
      activePage: 1
    });
    dispatch(getEntities({}));
  };
<%_ } _%>

<%_ if (paginationNo || paginationInfiniteScroll) { _%>
  useEffect(() => {
  <%_ if (!paginationNo) { _%>
    resetAll();
  <%_ } else { _%>
    dispatch(getEntities({}));
  <%_ } _%>
  }, []);
<%_ } _%>

<%_ if (searchEngine) { _%>
  const startSearching = (e) => {
    if (search) {
  <%_ if (paginationInfiniteScroll) { _%>
      dispatch(reset());
  <%_ } _%>
  <%_ if (!paginationNo) { _%>
      setPaginationState({
        ...paginationState,
        activePage: 1
      });
      dispatch(
        searchEntities({
          query: search,
          page: paginationState.activePage - 1,
          size: paginationState.itemsPerPage,
          sort: `${paginationState.sort},${paginationState.order}`,
        })
      );
  <%_ } else { _%>
      dispatch(searchEntities({query: search}));
  <%_ } _%>
    }
    e.preventDefault();
  };

  const clear = () => {
  <%_ if (paginationInfiniteScroll) { _%>
    dispatch(reset());
  <%_ } _%>
    setSearch('');
  <%_ if (!paginationNo) { _%>
    setPaginationState({
      ...paginationState,
      activePage: 1
    });
  <%_ } _%>
    dispatch(getEntities({}));
  };

  const handleSearch = event => setSearch(event.target.value);
<%_ } _%>

<%_ if (paginationInfiniteScroll) { _%>
  useEffect(() => {
    if (updateSuccess) {
      resetAll();
    }
  }, [updateSuccess]);

  useEffect(() => {
    getAllEntities()
  }, [paginationState.activePage]);

  const handleLoadMore = () => {
    if ((window as any).pageYOffset > 0) {
      setPaginationState({
        ...paginationState,
        activePage: paginationState.activePage + 1
      });
    }
  };
<%_ } _%>

<%_ if (!paginationNo) { _%>
  <%_ if (paginationPagination) { _%>
  const sortEntities = () => {
    getAllEntities();
    const endURL = `?page=${paginationState.activePage}&sort=${paginationState.sort},${paginationState.order}`;
    if (location.search !== endURL) {

      navigate(`${location.pathname}${endURL}`);
    }
  };
  <%_ } _%>

  useEffect(() => {
  <%_ if (paginationInfiniteScroll) { _%>
    if (sorting) {
      getAllEntities();
      setSorting(false);
    }
  <%_ } else { _%>
    sortEntities();
  <%_ } _%>
  }, [<% if (paginationInfiniteScroll) { %>sorting<% } else { %>paginationState.activePage, paginationState.order, paginationState.sort<% } %><%_ if (searchEngine) { _%>, search<% } %>]);

  <%_ if (paginationPagination) { _%>
  useEffect(() => {
    const page = searchParams.get('page');
    const sort = searchParams.get(SORT);
    if (page && sort) {
      const sortSplit = sort.split(',');
      setPaginationState({
        ...paginationState,
        activePage: +page,
        sort: sortSplit[0],
        order: sortSplit[1]
      });
    }
  }, [location.search]);


  <%_ } _%>

  const sort = p => () => {
  <%_ if (paginationInfiniteScroll) { _%>
    dispatch(reset());
    setPaginationState({
      ...paginationState,
      activePage: 1,
      order: paginationState.order === ASC ? DESC : ASC,
      sort: p
    });
    setSorting(true);
  <%_ } else { _%>
    setPaginationState({
      ...paginationState,
      order: paginationState.order === ASC ? DESC : ASC,
      sort: p
    });
  <%_ } _%>
  };

  <%_ if (paginationPagination) { _%>
  const handlePagination = currentPage =>
    setPaginationState({
      ...paginationState,
      activePage: currentPage
    });

    const setPage = page => {
      setPaginationState({
        ...paginationState,
        activePage: page + 1,
      });
    };
  
    const setPageSize = pageSize => {
      setPaginationState({
        ...paginationState,
        itemsPerPage: pageSize,
      });
    };  

  <%_ } _%>
<%_ } _%>

  const handleSyncList = () => {
<%_ if (paginationNo) { _%>
      dispatch(getEntities({}));
<%_ } _%>
<%_ if (paginationPagination) { _%>
      sortEntities();
<%_ } _%>
<%_ if (paginationInfiniteScroll) { _%>
      resetAll();
<%_ } _%>
  };


  const columns: GridColDef[] = [
  <%_ for (field of fields) {
    const fieldType = field.fieldType;
    const fieldName = field.fieldName;
    const fieldIsEnum = field.fieldIsEnum;
  _%>
   <%_ if (fieldName !== primaryKey.name) { _%>
    { 
      field: '<%= field.fieldName %>',
      headerName:`<Translate contentKey="<%= `${i18nKeyPrefix}.${field.fieldName}` %>"><%= field.fieldNameHumanized %></Translate>`,
      flex: 1,
      width: 130,
    },
   <%_ } _%> 
  <%_ } _%>
  <%_ for (relationship of relationships) {
    const otherEntity = relationship.otherEntity;
    const ownerSide = relationship.ownerSide;
    const relationshipFieldName = relationship.relationshipFieldName;
    const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
    const otherEntityPkName = relationship.otherEntity.primaryKey && relationship.otherEntity.primaryKey.name || 'id';
    const otherEntityField = relationship.otherEntityField; _%>
    <%_ if (relationship.relationshipManyToOne
    || (relationship.relationshipOneToOne && ownerSide)
    || (relationship.relationshipManyToMany && ownerSide && paginationNo)) { _%>
    { 
      field: '<%= relationship.relationshipFieldName %>',
      headerName: `<Translate contentKey="<%= `${i18nKeyPrefix}.${relationship.relationshipName}` %>"><%= relationship.relationshipNameHumanized %></Translate>`,
      flex: 1,
      width: 130,
      renderCell(params: GridRenderCellParams<any, I<%= entityReactName %>>){
        return (<>
    <%_ if (relationship.otherEntityUser) { _%>
      <%_ if (relationship.relationshipManyToMany) { _%>
                      {
                        (params.row.<%= relationshipFieldNamePlural %>) ?
                            (params.row.<%= relationshipFieldNamePlural %>.map((val, j) =>
                                <span key={j}>{val.<%= otherEntityField %>}{(j === params.row.<%= relationshipFieldNamePlural %>.length - 1) ? '' : ', '}</span>
                            )
                        ) : null
                      }
      <%_ } else { _%>
                      {<%= entityInstance + "." + relationshipFieldName %> ? <%=  "params.row." + relationshipFieldName + "." + otherEntityField %> : ''}
      <%_ } _%>
    <%_ } else { _%>
      <%_ if (relationship.relationshipManyToMany) { _%>
                        {
                          (params.row.<%= relationshipFieldNamePlural %>) ?
                              (params.row.<%= relationshipFieldNamePlural %>.map((val, j) =>
                                  <span key={j}><Link to={`/<%= otherEntity.entityPage %>/${val.<%= otherEntity.primaryKey.name %>}`}>{val.<%= otherEntityField %>}</Link>{(j === params.row.<%= relationshipFieldNamePlural %>.length - 1) ? '' : ', '}</span>
                              )
                          ) : null
                        }
      <%_ } else { _%>
                      {
                        <%= "params.row." + relationshipFieldName %> ?
                        <Link to={`/<%= otherEntity.entityPage %>/${<%= "params.row." + relationshipFieldName + "." + otherEntityPkName %>}`}>
                          { <%= "params.row." + relationshipFieldName + "." + otherEntityField %> }
                        </Link> : ''
                      }
      <%_ } _%>
    <%_ } _%>
           </>)
                    }
        
    },
   <%_ } _%>
  <%_ } _%>
    {
      field: 'Action',
      width: 200,
      renderCell(params: GridRenderCellParams<any, I<%= entityReactName %>>){
        return (
          <div className="btn-group flex-btn-group-container">
            <Button component={Link} to={`/<%= entityPage %>/${params.row.<%= primaryKey.name %>}`} color="info" size="small" data-cy="entityDetailsButton" startIcon={<InfoIcon/>}>
               <Translate contentKey="entity.action.view">View</Translate>
            </Button>
<%_ if (!readOnly) { _%>
            <Button component={Link} to={`/<%= entityPage %>/${params.row.<%= primaryKey.name %>}/edit<%_ if (paginationPagination) { _%>?page=${paginationState.activePage}&sort=${paginationState.sort},${paginationState.order}<%_ } _%>`} color="primary" size="small" data-cy="entityEditButton" startIcon={<EditIcon/>}>
              <Translate contentKey="entity.action.edit">Edit</Translate>
            </Button>
            <Button component={Link} to={`/<%= entityPage %>/${params.row.<%= primaryKey.name %>}/delete<%_ if (paginationPagination) { _%>?page=${paginationState.activePage}&sort=${paginationState.sort},${paginationState.order}<%_ } _%>`} color="warning" size="small" data-cy="entityDeleteButton" startIcon={<DeleteIcon/>}>
              <Translate contentKey="entity.action.delete">Delete</Translate>
            </Button>
<%_ } _%>
          </div>
        );
      },
    },
  ];

  const StyledBox = styled(Box)(({ theme }) => ({
    display: 'flex',
    flexDirection: 'column',
    height: '100%',
    width: '100%',
  }));
  
  return (
    <StyledBox>
      <Typography variant="h2" sx={{ ml: 2 }} id="<%= entityFileName %>-heading" data-cy="<%= entityClass %>Heading">
        <Translate contentKey="<%= i18nKeyPrefix %>.home.title"><%= entityClassPluralHumanized %></Translate>
        <Box sx={{ display: 'flex', justifyContent: 'flex-end' }}>
          <Button color="info" onClick={handleSyncList} disabled={loading} startIcon={<RefreshIcon/>}>
             <Translate contentKey="<%= i18nKeyPrefix %>.home.refreshListLabel">Refresh List</Translate>
          </Button>
<%_ if (!readOnly) { _%>
            <Button component={Link} to="/<%= entityPage %>/new" className="btn btn-primary jh-create-entity" id="jh-create-entity" data-cy="entityCreateButton" startIcon={<AddIcon/>}>
              <Translate contentKey="<%= i18nKeyPrefix %>.home.createLabel">
                Create new <%= entityClassHumanized %>
              </Translate>
            </Button>
<%_ } _%>
        </Box>
      </Typography>
      <DataGridPro
        density="standard"
        checkboxSelection
        loading={loading}
        sortingMode="server"
        columns={columns}
        rows={<%= entityInstance %>List}
        rowCount={totalItems}
        paginationMode="server"
        page={paginationState.activePage - 1}
        pageSize={paginationState.itemsPerPage}
        onPageChange={newPage => setPage(newPage)}
        onPageSizeChange={newPageSize => setPageSize(newPageSize)}
      />
    </StyledBox>
  );
};

export default <%= entityReactName %>;
